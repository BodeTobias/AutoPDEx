# Copyright (C) 2024 Tobias Bode
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.

def test_example_forward_euler():
  import time
  import math
  import os

  import jax
  from jax import lax, config
  import jax.numpy as jnp
  import flax
  import pygmsh
  import meshio

  from autopdex import seeder, geometry, solver, solution_structures, utility, models, assembler

  config.update("jax_enable_x64", True)


  ### Explicit time integration of the heat conduction in a maze
  # First domain: full gau√ü integration of virtual work of inner fluxes
  # Second domain: surface integration (heat inflow)
  # Third domain: collocation of transient part (forward Euler with diagonal tangent)
  

  ### Definition of geometry and boundary conditions
  pts = [[0.94, 8.68], [0.22, 8.68], [0.22, 8.36], [0.64, 8.36], [0.64, 
    8.24], [0.22, 8.24], [0.22, 7.94], [1.06, 7.94], [1.06, 
    7.82], [0.64, 7.82], [0.64, 7.5], [1.06, 7.5], [1.06, 7.38], [0.52, 
    7.38], [0.52, 7.82], [0.22, 7.82], [0.22, 4.94], [0.52, 
    4.94], [0.52, 6.66], [0.94, 6.66], [0.94, 6.96], [0.52, 
    6.96], [0.52, 7.08], [1.38, 7.08], [1.38, 7.5], [1.5, 7.5], [1.5, 
    6.96], [1.06, 6.96], [1.06, 6.66], [1.8, 6.66], [1.8, 7.94], [1.92, 
    7.94], [1.92, 7.5], [3.2, 7.5], [3.2, 7.08], [3.5, 7.08], [3.5, 
    7.5], [3.62, 7.5], [3.62, 7.08], [3.94, 7.08], [3.94, 7.82], [3.5, 
    7.82], [3.5, 7.94], [4.48, 7.94], [4.48, 7.82], [4.06, 7.82], [4.06,
    7.5], [4.48, 7.5], [4.48, 6.96], [4.36, 6.96], [4.36, 7.38], [4.06,
    7.38], [4.06, 6.96], [3.62, 6.96], [3.62, 6.66], [4.48, 
    6.66], [4.48, 6.54], [4.06, 6.54], [4.06, 6.1], [3.94, 6.1], [3.94, 
    6.54], [3.5, 6.54], [3.5, 6.96], [3.2, 6.96], [3.2, 6.54], [3.08, 
    6.54], [3.08, 6.96], [2.66, 6.96], [2.66, 7.08], [3.08, 
    7.08], [3.08, 7.38], [2.34, 7.38], [2.34, 6.96], [2.22, 
    6.96], [2.22, 7.38], [1.92, 7.38], [1.92, 6.66], [2.78, 
    6.66], [2.78, 6.22], [3.2, 6.22], [3.2, 6.1], [2.66, 6.1], [2.66, 
    6.54], [1.92, 6.54], [1.92, 6.1], [1.8, 6.1], [1.8, 6.54], [0.64, 
    6.54], [0.64, 6.22], [1.5, 6.22], [1.5, 6.1], [1.06, 6.1], [1.06, 
    5.68], [0.94, 5.68], [0.94, 6.1], [0.64, 6.1], [0.64, 5.38], [1.06, 
    5.38], [1.06, 5.26], [0.64, 5.26], [0.64, 4.4], [0.52, 4.4], [0.52, 
    4.82], [0.22, 4.82], [0.22, 4.1], [1.38, 4.1], [1.38, 4.52], [1.5, 
    4.52], [1.5, 4.1], [1.8, 4.1], [1.8, 4.82], [1.06, 4.82], [1.06, 
    4.4], [0.94, 4.4], [0.94, 4.94], [1.8, 4.94], [1.8, 5.26], [1.38, 
    5.26], [1.38, 5.8], [1.5, 5.8], [1.5, 5.38], [1.8, 5.38], [1.8, 
    5.8], [2.22, 5.8], [2.22, 6.22], [2.34, 6.22], [2.34, 5.8], [2.78, 
    5.8], [2.78, 5.38], [3.2, 5.38], [3.2, 4.82], [3.08, 4.82], [3.08, 
    5.26], [2.78, 5.26], [2.78, 4.82], [2.66, 4.82], [2.66, 
    5.68], [1.92, 5.68], [1.92, 4.94], [2.22, 4.94], [2.22, 
    5.38], [2.34, 5.38], [2.34, 4.1], [2.66, 4.1], [2.66, 4.52], [2.78, 
    4.52], [2.78, 4.1], [3.08, 4.1], [3.08, 4.52], [3.2, 4.52], [3.2, 
    4.1], [3.5, 4.1], [3.5, 4.52], [4.36, 4.52], [4.36, 4.82], [3.94, 
    4.82], [3.94, 4.94], [4.36, 4.94], [4.36, 5.68], [4.06, 
    5.68], [4.06, 5.26], [3.62, 5.26], [3.62, 4.82], [3.5, 4.82], [3.5, 
    5.68], [3.08, 5.68], [3.08, 5.8], [3.5, 5.8], [3.5, 6.22], [3.62, 
    6.22], [3.62, 5.38], [3.94, 5.38], [3.94, 5.8], [4.36, 5.8], [4.36, 
    6.22], [4.48, 6.22], [4.48, 5.38], [4.78, 5.38], [4.78, 5.8], [4.9, 
    5.8], [4.9, 5.26], [4.48, 5.26], [4.48, 4.94], [4.9, 4.94], [4.9, 
    4.82], [4.48, 4.82], [4.48, 4.52], [5.34, 4.52], [5.34, 4.4], [3.62,
    4.4], [3.62, 4.1], [4.06, 4.1], [4.06, 3.98], [3.62, 3.98], [3.62, 
    3.54], [3.5, 3.54], [3.5, 3.98], [2.78, 3.98], [2.78, 3.54], [2.66, 
    3.54], [2.66, 3.98], [2.22, 3.98], [2.22, 4.82], [1.92, 
    4.82], [1.92, 3.66], [2.34, 3.66], [2.34, 3.54], [1.92, 
    3.54], [1.92, 3.24], [2.78, 3.24], [2.78, 2.7], [2.66, 2.7], [2.66, 
    3.12], [1.8, 3.12], [1.8, 3.98], [1.5, 3.98], [1.5, 2.82], [2.34, 
    2.82], [2.34, 2.26], [1.38, 2.26], [1.38, 2.38], [2.22, 
    2.38], [2.22, 2.7], [1.38, 2.7], [1.38, 3.98], [0.22, 3.98], [0.22, 
    3.66], [1.06, 3.66], [1.06, 3.54], [0.64, 3.54], [0.64, 
    3.24], [1.06, 3.24], [1.06, 3.12], [0.52, 3.12], [0.52, 
    3.54], [0.22, 3.54], [0.22, 2.82], [1.06, 2.82], [1.06, 2.7], [0.22,
    2.7], [0.22, 2.38], [1.06, 2.38], [1.06, 1.96], [1.92, 
    1.96], [1.92, 1.84], [0.94, 1.84], [0.94, 2.26], [0.22, 
    2.26], [0.22, 1.96], [0.64, 1.96], [0.64, 1.84], [0.22, 
    1.84], [0.22, 1.54], [1.06, 1.54], [1.06, 1.42], [0.22, 
    1.42], [0.22, 0.26], [0.94, 0.26], [0.94, 0.56], [0.52, 
    0.56], [0.52, 0.68], [0.94, 0.68], [0.94, 0.98], [0.52, 
    0.98], [0.52, 1.1], [1.06, 1.1], [1.06, 0.68], [1.8, 0.68], [1.8, 
    1.42], [1.5, 1.42], [1.5, 0.98], [1.38, 0.98], [1.38, 1.54], [1.92, 
    1.54], [1.92, 0.56], [1.06, 0.56], [1.06, 0.26], [2.22, 
    0.26], [2.22, 0.68], [2.34, 0.68], [2.34, 0.26], [3.5, 0.26], [3.5, 
    0.56], [3.08, 0.56], [3.08, 0.68], [3.5, 0.68], [3.5, 0.98], [2.78, 
    0.98], [2.78, 0.56], [2.66, 0.56], [2.66, 1.1], [3.08, 1.1], [3.08, 
    1.42], [2.34, 1.42], [2.34, 0.98], [2.22, 0.98], [2.22, 
    1.54], [2.66, 1.54], [2.66, 1.84], [2.22, 1.84], [2.22, 
    1.96], [3.08, 1.96], [3.08, 2.26], [2.66, 2.26], [2.66, 
    2.38], [3.08, 2.38], [3.08, 3.66], [3.2, 3.66], [3.2, 1.96], [3.62, 
    1.96], [3.62, 1.84], [2.78, 1.84], [2.78, 1.54], [3.62, 
    1.54], [3.62, 1.42], [3.2, 1.42], [3.2, 1.1], [3.62, 1.1], [3.62, 
    0.26], [4.36, 0.26], [4.36, 0.56], [3.94, 0.56], [3.94, 1.1], [4.06,
    1.1], [4.06, 0.68], [4.48, 0.68], [4.48, 0.26], [4.78, 
    0.26], [4.78, 0.68], [4.9, 0.68], [4.9, 0.26], [5.22, 0.26], [5.22, 
    0.68], [5.34, 0.68], [5.34, 0.26], [5.64, 0.26], [5.64, 
    0.98], [5.22, 0.98], [5.22, 1.42], [4.9, 1.42], [4.9, 0.98], [4.78, 
    0.98], [4.78, 1.84], [4.48, 1.84], [4.48, 0.98], [4.36, 
    0.98], [4.36, 1.42], [3.94, 1.42], [3.94, 1.54], [4.36, 
    1.54], [4.36, 1.84], [3.94, 1.84], [3.94, 2.38], [4.06, 
    2.38], [4.06, 1.96], [4.9, 1.96], [4.9, 1.54], [5.34, 1.54], [5.34, 
    1.1], [5.76, 1.1], [5.76, 0.68], [6.18, 0.68], [6.18, 0.56], [5.76, 
    0.56], [5.76, 0.26], [7.34, 0.26], [7.34, 0.56], [6.92, 
    0.56], [6.92, 0.68], [7.78, 0.68], [7.78, 0.98], [6.62, 
    0.98], [6.62, 0.56], [6.5, 0.56], [6.5, 0.98], [6.06, 0.98], [6.06, 
    1.1], [6.92, 1.1], [6.92, 1.54], [7.04, 1.54], [7.04, 1.1], [7.34, 
    1.1], [7.34, 1.84], [6.62, 1.84], [6.62, 1.42], [5.64, 1.42], [5.64,
    1.54], [6.06, 1.54], [6.06, 1.96], [6.18, 1.96], [6.18, 
    1.54], [6.5, 1.54], [6.5, 2.26], [5.34, 2.26], [5.34, 1.96], [5.76, 
    1.96], [5.76, 1.84], [5.22, 1.84], [5.22, 2.26], [4.78, 
    2.26], [4.78, 2.7], [4.48, 2.7], [4.48, 2.26], [4.36, 2.26], [4.36, 
    2.7], [3.62, 2.7], [3.62, 2.26], [3.5, 2.26], [3.5, 2.82], [3.94, 
    2.82], [3.94, 3.12], [3.5, 3.12], [3.5, 3.24], [3.94, 3.24], [3.94, 
    3.66], [4.06, 3.66], [4.06, 2.82], [4.36, 2.82], [4.36, 
    3.24], [4.48, 3.24], [4.48, 2.82], [4.78, 2.82], [4.78, 3.24], [4.9,
    3.24], [4.9, 2.38], [5.22, 2.38], [5.22, 2.82], [5.34, 
    2.82], [5.34, 2.38], [5.64, 2.38], [5.64, 2.82], [5.76, 
    2.82], [5.76, 2.38], [6.06, 2.38], [6.06, 3.12], [5.22, 
    3.12], [5.22, 3.54], [4.36, 3.54], [4.36, 4.1], [5.34, 4.1], [5.34, 
    3.98], [4.48, 3.98], [4.48, 3.66], [5.34, 3.66], [5.34, 
    3.24], [5.64, 3.24], [5.64, 4.52], [5.76, 4.52], [5.76, 4.1], [6.18,
    4.1], [6.18, 3.54], [6.06, 3.54], [6.06, 3.98], [5.76, 
    3.98], [5.76, 3.24], [6.62, 3.24], [6.62, 2.82], [6.92, 
    2.82], [6.92, 3.24], [7.04, 3.24], [7.04, 2.82], [7.78, 
    2.82], [7.78, 3.12], [7.34, 3.12], [7.34, 3.54], [6.5, 3.54], [6.5, 
    4.1], [6.62, 4.1], [6.62, 3.66], [6.92, 3.66], [6.92, 4.1], [7.04, 
    4.1], [7.04, 3.66], [7.34, 3.66], [7.34, 4.1], [8.74, 4.1], [8.74, 
    3.66], [9.06, 3.66], [9.06, 4.4], [8.64, 4.4], [8.64, 5.26], [8.2, 
    5.26], [8.2, 5.68], [7.9, 5.68], [7.9, 4.94], [8.32, 4.94], [8.32, 
    4.4], [8.2, 4.4], [8.2, 4.82], [7.9, 4.82], [7.9, 4.4], [7.78, 
    4.4], [7.78, 5.8], [8.32, 5.8], [8.32, 5.38], [8.64, 5.38], [8.64, 
    5.8], [8.74, 5.8], [8.74, 5.38], [9.6, 5.38], [9.6, 4.4], [9.48, 
    4.4], [9.48, 5.26], [8.74, 5.26], [8.74, 4.52], [9.06, 4.52], [9.06,
    4.94], [9.18, 4.94], [9.18, 4.1], [9.6, 4.1], [9.6, 3.98], [9.18, 
    3.98], [9.18, 3.66], [9.6, 3.66], [9.6, 3.54], [9.18, 3.54], [9.18, 
    3.24], [9.6, 3.24], [9.6, 3.12], [9.18, 3.12], [9.18, 2.82], [9.92, 
    2.82], [9.92, 3.24], [10.02, 3.24], [10.02, 1.96], [10.34, 
    1.96], [10.34, 2.82], [10.46, 2.82], [10.46, 2.38], [10.88, 
    2.38], [10.88, 2.26], [10.46, 2.26], [10.46, 1.1], [10.88, 
    1.1], [10.88, 0.98], [10.34, 0.98], [10.34, 1.84], [10.02, 
    1.84], [10.02, 1.42], [9.92, 1.42], [9.92, 1.84], [9.48, 
    1.84], [9.48, 1.96], [9.92, 1.96], [9.92, 2.26], [9.48, 
    2.26], [9.48, 2.38], [9.92, 2.38], [9.92, 2.7], [8.64, 2.7], [8.64, 
    2.82], [9.06, 2.82], [9.06, 3.54], [8.74, 3.54], [8.74, 
    3.12], [8.32, 3.12], [8.32, 2.26], [8.2, 2.26], [8.2, 3.66], [8.32, 
    3.66], [8.32, 3.24], [8.64, 3.24], [8.64, 3.98], [7.46, 
    3.98], [7.46, 3.24], [7.78, 3.24], [7.78, 3.66], [7.9, 3.66], [7.9, 
    2.7], [7.46, 2.7], [7.46, 2.38], [7.9, 2.38], [7.9, 2.26], [7.34, 
    2.26], [7.34, 2.7], [6.5, 2.7], [6.5, 3.12], [6.18, 3.12], [6.18, 
    2.38], [7.04, 2.38], [7.04, 2.26], [6.62, 2.26], [6.62, 
    1.96], [8.32, 1.96], [8.32, 0.98], [8.2, 0.98], [8.2, 1.84], [7.9, 
    1.84], [7.9, 1.42], [7.78, 1.42], [7.78, 1.84], [7.46, 1.84], [7.46,
    1.1], [7.9, 1.1], [7.9, 0.56], [7.46, 0.56], [7.46, 0.26], [8.64, 
    0.26], [8.64, 0.56], [8.2, 0.56], [8.2, 0.68], [8.74, 0.68], [8.74, 
    0.26], [9.06, 0.26], [9.06, 0.68], [9.48, 0.68], [9.48, 
    1.42], [8.74, 1.42], [8.74, 1.1], [9.18, 1.1], [9.18, 0.98], [8.64, 
    0.98], [8.64, 1.54], [9.06, 1.54], [9.06, 1.84], [8.64, 
    1.84], [8.64, 2.38], [9.18, 2.38], [9.18, 2.26], [8.74, 
    2.26], [8.74, 1.96], [9.18, 1.96], [9.18, 1.54], [9.6, 1.54], [9.6, 
    0.56], [9.18, 0.56], [9.18, 0.26], [10.34, 0.26], [10.34, 
    0.56], [9.92, 0.56], [9.92, 1.1], [10.02, 1.1], [10.02, 
    0.68], [10.46, 0.68], [10.46, 0.26], [10.76, 0.26], [10.76, 
    0.68], [10.88, 0.68], [10.88, 0.26], [12.9, 0.26], [12.9, 
    0.56], [11.62, 0.56], [11.62, 1.42], [11.32, 1.42], [11.32, 
    0.56], [11.2, 0.56], [11.2, 1.42], [10.76, 1.42], [10.76, 
    1.54], [11.2, 1.54], [11.2, 1.84], [10.76, 1.84], [10.76, 
    1.96], [11.32, 1.96], [11.32, 1.54], [11.74, 1.54], [11.74, 
    1.1], [12.6, 1.1], [12.6, 0.98], [11.74, 0.98], [11.74, 
    0.68], [12.9, 0.68], [12.9, 1.42], [12.04, 1.42], [12.04, 
    1.54], [12.9, 1.54], [12.9, 1.84], [12.04, 1.84], [12.04, 
    2.38], [12.16, 2.38], [12.16, 1.96], [12.48, 1.96], [12.48, 
    2.38], [12.6, 2.38], [12.6, 1.96], [12.9, 1.96], [12.9, 
    3.12], [12.6, 3.12], [12.6, 2.7], [11.74, 2.7], [11.74, 
    1.84], [11.62, 1.84], [11.62, 2.7], [11.32, 2.7], [11.32, 
    2.26], [11.2, 2.26], [11.2, 2.82], [12.48, 2.82], [12.48, 
    3.12], [10.88, 3.12], [10.88, 2.7], [10.76, 2.7], [10.76, 
    3.12], [10.34, 3.12], [10.34, 3.24], [10.76, 3.24], [10.76, 
    3.66], [11.2, 3.66], [11.2, 3.98], [10.76, 3.98], [10.76, 
    4.52], [10.88, 4.52], [10.88, 4.1], [11.62, 4.1], [11.62, 
    4.4], [11.2, 4.4], [11.2, 4.52], [12.16, 4.52], [12.16, 
    4.4], [11.74, 4.4], [11.74, 3.98], [11.32, 3.98], [11.32, 
    3.54], [10.88, 3.54], [10.88, 3.24], [11.62, 3.24], [11.62, 
    3.66], [11.74, 3.66], [11.74, 3.24], [12.48, 3.24], [12.48, 
    3.54], [12.04, 3.54], [12.04, 4.1], [12.16, 4.1], [12.16, 
    3.66], [12.6, 3.66], [12.6, 3.24], [12.9, 3.24], [12.9, 
    3.98], [12.48, 3.98], [12.48, 4.1], [12.9, 4.1], [12.9, 
    4.4], [12.48, 4.4], [12.48, 4.52], [12.9, 4.52], [12.9, 
    5.26], [12.48, 5.26], [12.48, 5.38], [12.9, 5.38], [12.9, 
    5.68], [12.48, 5.68], [12.48, 5.8], [12.9, 5.8], [12.9, 
    6.54], [12.6, 6.54], [12.6, 6.1], [12.48, 6.1], [12.48, 
    6.96], [12.04, 6.96], [12.04, 7.08], [12.6, 7.08], [12.6, 
    6.66], [12.9, 6.66], [12.9, 8.68], [12.6, 8.68], [12.6, 
    8.24], [12.48, 8.24], [12.48, 8.68], [11.32, 8.68], [11.32, 
    8.36], [11.74, 8.36], [11.74, 7.94], [12.04, 7.94], [12.04, 
    8.36], [12.16, 8.36], [12.16, 7.94], [12.6, 7.94], [12.6, 
    7.38], [12.48, 7.38], [12.48, 7.82], [12.16, 7.82], [12.16, 
    7.38], [12.04, 7.38], [12.04, 7.82], [11.74, 7.82], [11.74, 
    7.38], [11.62, 7.38], [11.62, 7.82], [11.32, 7.82], [11.32, 
    7.38], [11.2, 7.38], [11.2, 7.94], [11.62, 7.94], [11.62, 
    8.24], [10.76, 8.24], [10.76, 8.36], [11.2, 8.36], [11.2, 
    8.68], [9.6, 8.68], [9.6, 8.24], [9.48, 8.24], [9.48, 8.68], [8.74, 
    8.68], [8.74, 8.36], [9.18, 8.36], [9.18, 8.24], [8.74, 
    8.24], [8.74, 7.94], [9.92, 7.94], [9.92, 8.36], [10.46, 
    8.36], [10.46, 8.24], [10.02, 8.24], [10.02, 7.82], [9.6, 
    7.82], [9.6, 7.5], [10.02, 7.5], [10.02, 7.38], [9.6, 7.38], [9.6, 
    7.08], [10.34, 7.08], [10.34, 7.94], [10.88, 7.94], [10.88, 
    7.82], [10.46, 7.82], [10.46, 7.5], [10.88, 7.5], [10.88, 
    7.38], [10.46, 7.38], [10.46, 7.08], [11.74, 7.08], [11.74, 
    6.22], [12.04, 6.22], [12.04, 6.66], [12.16, 6.66], [12.16, 
    6.1], [11.2, 6.1], [11.2, 6.22], [11.62, 6.22], [11.62, 
    6.96], [11.32, 6.96], [11.32, 6.54], [10.88, 6.54], [10.88, 
    6.1], [10.76, 6.1], [10.76, 6.66], [11.2, 6.66], [11.2, 
    6.96], [10.46, 6.96], [10.46, 5.8], [12.16, 5.8], [12.16, 
    4.94], [12.6, 4.94], [12.6, 4.82], [12.04, 4.82], [12.04, 
    5.26], [11.32, 5.26], [11.32, 4.94], [11.74, 4.94], [11.74, 
    4.82], [10.02, 4.82], [10.02, 4.52], [10.46, 4.52], [10.46, 
    3.54], [10.34, 3.54], [10.34, 4.4], [10.02, 4.4], [10.02, 
    3.54], [9.92, 3.54], [9.92, 4.94], [10.34, 4.94], [10.34, 
    5.38], [10.46, 5.38], [10.46, 4.94], [11.2, 4.94], [11.2, 
    5.26], [10.76, 5.26], [10.76, 5.38], [12.04, 5.38], [12.04, 
    5.68], [10.02, 5.68], [10.02, 5.26], [9.92, 5.26], [9.92, 
    5.68], [9.48, 5.68], [9.48, 6.22], [9.6, 6.22], [9.6, 5.8], [9.92, 
    5.8], [9.92, 6.22], [10.02, 6.22], [10.02, 5.8], [10.34, 
    5.8], [10.34, 6.96], [10.02, 6.96], [10.02, 6.54], [9.92, 
    6.54], [9.92, 6.96], [9.6, 6.96], [9.6, 6.54], [9.48, 6.54], [9.48, 
    6.96], [9.18, 6.96], [9.18, 5.68], [9.06, 5.68], [9.06, 
    6.96], [8.64, 6.96], [8.64, 7.08], [9.06, 7.08], [9.06, 7.5], [9.18,
    7.5], [9.18, 7.08], [9.48, 7.08], [9.48, 7.82], [8.74, 
    7.82], [8.74, 7.38], [7.78, 7.38], [7.78, 7.5], [8.2, 7.5], [8.2, 
    7.82], [7.78, 7.82], [7.78, 8.36], [7.9, 8.36], [7.9, 7.94], [8.32, 
    7.94], [8.32, 7.5], [8.64, 7.5], [8.64, 8.68], [8.32, 8.68], [8.32, 
    8.24], [8.2, 8.24], [8.2, 8.68], [6.62, 8.68], [6.62, 8.36], [7.04, 
    8.36], [7.04, 8.24], [6.62, 8.24], [6.62, 7.82], [6.5, 7.82], [6.5, 
    8.24], [5.76, 8.24], [5.76, 7.5], [6.06, 7.5], [6.06, 7.94], [6.18, 
    7.94], [6.18, 7.38], [5.76, 7.38], [5.76, 7.08], [6.18, 
    7.08], [6.18, 6.96], [5.34, 6.96], [5.34, 6.66], [6.5, 6.66], [6.5, 
    7.5], [6.62, 7.5], [6.62, 6.66], [6.92, 6.66], [6.92, 7.08], [7.34, 
    7.08], [7.34, 7.82], [7.04, 7.82], [7.04, 7.38], [6.92, 
    7.38], [6.92, 7.94], [7.34, 7.94], [7.34, 8.36], [7.46, 
    8.36], [7.46, 7.08], [7.9, 7.08], [7.9, 6.66], [8.2, 6.66], [8.2, 
    7.08], [8.32, 7.08], [8.32, 6.66], [8.74, 6.66], [8.74, 6.1], [8.64,
    6.1], [8.64, 6.54], [7.9, 6.54], [7.9, 6.22], [8.32, 6.22], [8.32, 
    6.1], [7.34, 6.1], [7.34, 6.22], [7.78, 6.22], [7.78, 6.96], [7.46, 
    6.96], [7.46, 6.54], [7.34, 6.54], [7.34, 6.96], [7.04, 
    6.96], [7.04, 6.54], [5.76, 6.54], [5.76, 6.22], [6.62, 
    6.22], [6.62, 5.38], [6.92, 5.38], [6.92, 6.22], [7.04, 
    6.22], [7.04, 5.8], [7.46, 5.8], [7.46, 5.68], [7.04, 5.68], [7.04, 
    5.38], [7.46, 5.38], [7.46, 4.4], [7.34, 4.4], [7.34, 4.82], [6.92, 
    4.82], [6.92, 4.94], [7.34, 4.94], [7.34, 5.26], [6.62, 
    5.26], [6.62, 4.52], [7.04, 4.52], [7.04, 4.4], [6.06, 4.4], [6.06, 
    4.52], [6.5, 4.52], [6.5, 5.68], [6.06, 5.68], [6.06, 5.8], [6.5, 
    5.8], [6.5, 6.1], [5.76, 6.1], [5.76, 5.38], [6.18, 5.38], [6.18, 
    4.82], [5.64, 4.82], [5.64, 4.94], [6.06, 4.94], [6.06, 
    5.26], [5.34, 5.26], [5.34, 4.82], [5.22, 4.82], [5.22, 
    5.38], [5.64, 5.38], [5.64, 5.68], [5.22, 5.68], [5.22, 5.8], [5.64,
    5.8], [5.64, 6.54], [5.34, 6.54], [5.34, 6.1], [5.22, 6.1], [5.22, 
    6.54], [4.9, 6.54], [4.9, 6.1], [4.78, 6.1], [4.78, 6.66], [5.22, 
    6.66], [5.22, 6.96], [4.78, 6.96], [4.78, 7.08], [5.64, 
    7.08], [5.64, 7.82], [5.22, 7.82], [5.22, 7.94], [5.64, 
    7.94], [5.64, 8.24], [4.9, 8.24], [4.9, 7.5], [5.34, 7.5], [5.34, 
    7.38], [4.78, 7.38], [4.78, 8.24], [3.5, 8.24], [3.5, 8.36], [6.5, 
    8.36], [6.5, 8.68], [3.2, 8.68], [3.2, 7.82], [3.08, 7.82], [3.08, 
    8.68], [1.5, 8.68], [1.5, 8.36], [2.78, 8.36], [2.78, 7.82], [2.22, 
    7.82], [2.22, 7.94], [2.66, 7.94], [2.66, 8.24], [1.5, 8.24], [1.5, 
    7.82], [1.38, 7.82], [1.38, 8.68], [1.06, 8.68], [1.06, 
    8.24], [0.94, 8.24]]
  with pygmsh.geo.Geometry() as geom:
      geom.add_polygon(pts,mesh_size=5.)
      mesh = geom.generate_mesh(order=1)


  # Import mesh
  n_dim = 2
  x_nodes = jnp.asarray(mesh.points[:,:n_dim])
  n_nodes = x_nodes.shape[0]
  elements = jnp.asarray(mesh.cells_dict['triangle'])
  surface_elements = jnp.asarray(mesh.cells_dict['line'])

  # Select elements for inhomogeneous Neumann boundary conditions
  neumann_selection_1 = geometry.select_elements_on_line(x_nodes, surface_elements, pts[35], pts[36])
  neumann_elements_1 = surface_elements[neumann_selection_1]

  # Generate domain integration points in mesh
  (x_int, w_int, n_int, domain_connectivity) = seeder.int_pts_in_tri_mesh(x_nodes, elements, order=1)
  max_neighbors_1 = domain_connectivity.shape[-1]

  # Generate surface integration points on surface mesh and select domain elements that belong to the surface elements
  (x_surf_int, w_surf_int, n_surf_int, nods_of_surf_elem) = seeder.int_pts_in_line_mesh(x_nodes, neumann_elements_1, order=1)
  surf_connectivity = geometry.subelems_in_elems(nods_of_surf_elem, elements)
  max_neighbors_2 = surf_connectivity.shape[-1]

  # Collocation for T1 mesh
  distribut_weights_to_nodes = jnp.outer(w_int, jnp.asarray([1/3, 1/3, 1/3]))
  collocation_weights = jnp.zeros((x_nodes.shape[0],)).at[domain_connectivity].add(distribut_weights_to_nodes)


  ### Definition of weak forms: 3 domains are used, one for heat conduction in region, one for surface inflows and one with collocation for transient part
  # Heat conduction
  laplace_fun = models.poisson_weak()

  # Heat flow over surface
  heat_inflow_fun = models.neumann_weak(lambda x: -1.0e3)

  # Wrapper around laplace_fun but with dofs from old timestep (for divergence of heat flow density)
  def laplace_fun_n(x, ansatz, test_ansatz, settings, static_settings, int_point_number, set):
      # Load old dofs from settings
      dofs_n = settings['dofs n']
      neighbor_list = settings['connectivity'][set][int_point_number]
      local_dofs_n = dofs_n[neighbor_list]
      ansatz_n = lambda x: solution_structures.solution_structure(x, int_point_number, local_dofs_n, settings, static_settings, set)
      return laplace_fun(x, ansatz_n, test_ansatz, settings, static_settings, int_point_number, set)

  # Wrapper around neumann_weak but with dofs from old timestep (external surface nodal forces at time n)
  def heat_inflow_fun_n(x, ansatz, test_ansatz, settings, static_settings, int_point_number, set):
      # Load old dofs from settings
      dofs_n = settings['dofs n']
      neighbor_list = settings['connectivity'][set][int_point_number]
      local_dofs_n = dofs_n[neighbor_list]
      ansatz_n = lambda x: solution_structures.solution_structure(x, int_point_number, local_dofs_n, settings, static_settings, set)
      return heat_inflow_fun(x, ansatz_n, test_ansatz, settings, static_settings, int_point_number, set)

  # Dynamic part (with specified time discretization)
  heat_capacity = 1.0e-1
  transient_part = models.forward_backward_euler_weak(lambda x, settings: heat_capacity)


  ### Setting
  n_fields = 1
  dofs_0 = jnp.zeros((n_nodes, n_fields))
  static_settings = flax.core.FrozenDict({
    'solution space': ('fem simplex', 'fem simplex', 'nodal values'),# use collocation for transient part in order to get diagonal tangent in explicit case
    'shape function mode': 'compiled',
    'number of fields': (n_fields, n_fields, n_fields),
    'assembling mode': ('sparse', 'sparse', 'sparse'),
    'maximal number of neighbors': (max_neighbors_1, max_neighbors_2, 1),
    'variational scheme': ('weak form galerkin', 'weak form galerkin', 'weak form galerkin'),
    'model': (laplace_fun_n, heat_inflow_fun_n, transient_part),
    'solution structure': ('off', 'off', 'off'),
    'known sparsity pattern': 'diagonal',
    'solver type': 'diagonal linear',
    'verbose': 1,
  })

  settings = {
    'connectivity': (domain_connectivity, surf_connectivity, jnp.arange(0, n_nodes).reshape(n_nodes, 1)),
    'node coordinates': x_nodes,
    'integration coordinates': (x_int, x_surf_int, x_nodes),
    'integration weights': (w_int, w_surf_int, collocation_weights),
  }

  # Precompute shape functions
  settings = solution_structures.precompile(dofs_0, settings, static_settings)



  ### Call solver
  n_steps = 5
  n_plot = 1
  settings['time increment'] = 1e-4

  plot_incr = math.floor(n_steps/ n_plot)
  post_data = jnp.zeros((n_plot, dofs_0.shape[0], dofs_0.shape[1]))
  def step_fun(itt, carry):
    dofs, post_data, plt_itt = carry
    settings['dofs n'] = dofs
    dofs = dofs + solver.solver(dofs, settings, static_settings)[0]

    # Output to post_data
    def plot_fun():
      return post_data.at[plt_itt].set(dofs), plt_itt + 1
    def increment_count():
      return post_data, plt_itt
    post_data, plt_itt = jax.lax.cond(jnp.logical_or(jnp.mod(itt, plot_incr) < 1, itt == n_steps-1) , plot_fun, increment_count)

    return dofs, post_data, plt_itt

  dofs, post_data, _ = lax.fori_loop(0, n_steps, step_fun, (dofs_0, post_data, 0))

  check = dofs.flatten().sum()
  print(check)
  assert jnp.isclose(check, 60.74250774270505)

# test_example_forward_euler()